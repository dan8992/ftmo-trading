version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: dax_trading
      POSTGRES_USER: finrl_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/postgres/init-sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finrl_user -d dax_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-data-collector:
    build: ./services/postgres-data-collector
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dax_trading
      POSTGRES_USER: finrl_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  dax-llm-service:
    build: ./services/dax-llm-service
    environment:
      POSTGRES_HOST: postgres
      MODEL_NAME: nlptown/bert-base-multilingual-uncased-sentiment
      TRANSFORMERS_CACHE: /tmp/transformers_cache
    ports:
      - "8000:8000"
      - "8081:8080"
    volumes:
      - model_cache:/tmp/transformers_cache
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  finbert-trading-llm:
    build: ./services/finbert-trading-llm
    environment:
      POSTGRES_HOST: postgres
      MODEL_NAME: ProsusAI/finbert
      TRANSFORMERS_CACHE: /tmp/transformers_cache
    ports:
      - "8001:8001"
    volumes:
      - model_cache:/tmp/transformers_cache
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  finbert-sentiment-service:
    build: ./services/finbert-sentiment-service
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dax_trading
      POSTGRES_USER: finrl_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8002:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  signal-generation-engine:
    build: ./services/signal-generation-engine
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dax_trading
      POSTGRES_USER: finrl_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ANALYSIS_INTERVAL: 300
      SIGNAL_CONFIDENCE_THRESHOLD: 0.7
      FTMO_DAILY_LOSS_LIMIT: 0.05
      FTMO_TOTAL_LOSS_LIMIT: 0.10
      FTMO_MAX_RISK_PER_TRADE: 0.02
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      finbert-trading-llm:
        condition: service_started
    restart: unless-stopped

  technical-pattern-service:
    build: ./services/technical-pattern-service
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dax_trading
      POSTGRES_USER: finrl_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  news-ingestion-service:
    build: ./services/news-ingestion-service
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dax_trading
      POSTGRES_USER: finrl_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      NEWS_API_KEY: ${NEWS_API_KEY}
    ports:
      - "8084:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  signal-monitoring:
    build: ./services/signal-monitoring
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: dax_trading
      POSTGRES_USER: finrl_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8085:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./services/prometheus/config:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/grafana/provisioning:/etc/grafana/provisioning
      - ./services/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  model_cache:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: ftmo-trading-network